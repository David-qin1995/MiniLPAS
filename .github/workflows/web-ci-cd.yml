name: Web CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'web-backend/**'
      - 'web-frontend/**'
      - 'deploy/backend.Dockerfile'
      - 'deploy/frontend.Dockerfile'
      - 'deploy/frontend.nginx.conf'
      - '.github/workflows/web-ci-cd.yml'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE: ${{ github.repository_owner }}/minilpa-backend
  FRONTEND_IMAGE: ${{ github.repository_owner }}/minilpa-frontend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Meta backend
        id: meta_backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix=sha-

      - name: Meta frontend
        id: meta_frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix=sha-

      - name: Build/push backend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: deploy/backend.Dockerfile
          push: true
          tags: ${{ steps.meta_backend.outputs.tags }}
          labels: ${{ steps.meta_backend.outputs.labels }}

      - name: Build/push frontend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: deploy/frontend.Dockerfile
          push: true
          tags: ${{ steps.meta_frontend.outputs.tags }}
          labels: ${{ steps.meta_frontend.outputs.labels }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Prepare refs
        id: refs
        run: |
          echo "be=${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:latest" >> $GITHUB_OUTPUT
          echo "fe=${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:latest" >> $GITHUB_OUTPUT

      - name: SSH deploy
        if: ${{ secrets.SSH_HOST != '' && secrets.SSH_USER != '' && secrets.SSH_KEY != '' }}
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT || '22' }}
          script: |
            set -euo pipefail
            DEPLOY_DIR="/www/wwwroot/minilpa/web"
            mkdir -p "$DEPLOY_DIR"
            cat > "$DEPLOY_DIR/docker-compose.yml" <<'EOF'
            version: "3.8"
            services:
              backend:
                image: ${BACKEND_IMAGE}
                container_name: minilpa-backend
                restart: unless-stopped
                environment:
                  - JAVA_OPTS=-Xms256m -Xmx512m
                ports:
                  - "8080:8080"
              frontend:
                image: ${FRONTEND_IMAGE}
                container_name: minilpa-frontend
                restart: unless-stopped
                ports:
                  - "8081:8081"
                depends_on:
                  - backend
            EOF
            BACKEND_IMAGE='${{ steps.refs.outputs.be }}' FRONTEND_IMAGE='${{ steps.refs.outputs.fe }}' envsubst < "$DEPLOY_DIR/docker-compose.yml" > "$DEPLOY_DIR/docker-compose.rendered.yml"
            mv "$DEPLOY_DIR/docker-compose.rendered.yml" "$DEPLOY_DIR/docker-compose.yml"
            docker compose -f "$DEPLOY_DIR/docker-compose.yml" pull || true
            docker compose -f "$DEPLOY_DIR/docker-compose.yml" up -d
      - name: Skip deploy (missing SSH secrets)
        if: ${{ !(secrets.SSH_HOST != '' && secrets.SSH_USER != '' && secrets.SSH_KEY != '' ) }}
        run: |
          echo "SSH_HOST/SSH_USER/SSH_KEY secrets not configured. Skipping deploy step."

